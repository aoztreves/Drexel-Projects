List
- Lists are made of sequences of elements. You cannot visit 5th element without preceding 4 elements.
There is new space allocated to every new element
Consecutive elements are linked together with a pointer
Middle can also be modified in constant time
You can acces in linear time and modify in constant time
Stack
-Stack serves as a collection of elements
Stack works with adding new elements on top of the other so you can work on them by popping or pushing but you have the work with whats at the top
Queue
-Queue is a different data type where all the elements are kept in order. Since its order when you add something new to the collection, the first thing to remove from it is the element you put in first.
Dictionary
-its a set of key, value pairs
allows to associate satellite data with a key
Keys are always unique
You can check one of the elements, add or remove another one

Given a sorted array with n items, how many times (at most) will the binary search compare elements? Explain your answer.
-Need Î˜(log n) time, worst and avg.
Because middle element will be compared with the ones on the left and on the right, which will make the data sort compare to the mid element.
Given an array with n items, how many times (at most) will the linear search compare elements? Explain your answer.
-O(n) times to finish searching because it doesnt jump so it sorts it one by one so it takes more time to get this one right.
Give an example when using linear search would be preferable over the binary search.
-i think if the data is not sorted then linear search will be faster than binary search or when you have more than one dimensional data then linear search is way easier than binary.

Show the effect of the quicksort, from the lecture notes, on the following array (always choose the left-most element in a sub-array as the pivot). Show the array at the beginning of each level of calls. Mark the pivot of each sub-array.
-
*84* 37 93 82 98 27 63 73 93 27 75 55 45 8
37 82 27 63 73 27 75 55 45 8 *84* 93 98 93
*37* 82 27 63 73 27 75 55 45 8 84 *93* 98 93
27 27 8 *37* 82 63 73 75 55 45 84 *93* 98 93
*27* 27 8 37 *82* 63 73 75 55 45 84 93 *98* 93
8 *27* 27 37 63 73 75 55 45 *82* 84 93 93 *98*
8 27 27 37 *63* 73 75 77 45 82 84 93 93 98
8 27 27 37 45 *63* 73 75 77 82 84 93 93 98
8 27 27 37 45 63 *73* 75 77 82 84 93 93 98
8 27 27 37 45 63 73 *75* 77 82 84 93 93 98
8 27 27 37 45 63 73 75 77 82 84 93 93 98

Q 6 See the file d1.c from the lab directory. Display the list that's built.
- List should be 3 24 06
Q 7 See the file ll.py from the lab directory. Display the list that's built.
- List is [13,[28,[24,[3, None]]]]
Q 8 Compile and run the file ptrs.c from the lab directory. Why are the 2 sets of output different? What's going on there?
- Because at first we are using buffer as a pointer and for the second one we are creating a memory location of 100 bytes and pointing at that memory location not to the pointer.
Q 9 See the file hash.c from the lab directory. Display the resulting table.
-for key 3 its cos,86 and bob,38
for key 4 its jaga,24 - kate,28 - nash,11 - vera,99
for key 5 its jesse,78
Q 10 From the table above, write a function called find, that takes a key and a reference to an integer, fills in the reference w/the appropriate value (if found), and returns 1 (true). If the key is not found, return 0 (false). You may assume that p_ans already points to a valid location. So:

int find( char *key, int *p_ans );
Can be called like this:

 char *name = "Bob";
int data;
if( find( name, &data ))
   printf( "Found %s.  (S)he's %i\n\n", name, data );
else
   printf( "\nCouldn't find %s\n\n", name );

answer:

int find ( char *key, int *p_ans ) {
	entry entry*;
	int i;
	i = hash(key);
	
	for ( entry = table[i]; entry!=NULL; entry=entry->next){
		if( strcmp(key , entry->key){
			return 1;
			}
		}
		
	return 0;
}

